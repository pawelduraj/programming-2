#include <iostream>

using namespace std;


// Creates and returns an array of size n filled with random numbers from the set {0, 1, ..., 10}.
int *randomArray(int n) {
    int *array = new int[n];
    for (int i = 0; i < n; i++)
        *(array + i) = rand() % 11;
    return array;
}


// Returns the maximum value of an array of size n.
int max(const int *array, int n) {
    int max = *array;
    for (int i = 1; i < n; i++)
        if (*(array + i) > max)
            max = *(array + i);
    return max;
}


// Reverses order of elements in an array of size n.
void reverse(int *array, int n) {
    for (int i = 0; i < n / 2; i++) {
        int temp = *(array + i);
        *(array + i) = *(array + n - 1 - i);
        *(array + n - 1 - i) = temp;
    }
}


// Shifts elements of an array of size n to the left by m places.
void shift(int *array, int n, int m) {
    m = m % n;
    for (int i = 0; i < m; i++) {
        int temp = *(array);
        for (int j = 0; j < n - 1; j++)
            *(array + j) = *(array + j + 1);
        *(array + n - 1) = temp;
    }
}


// Sorts an array of size n in ascending order.
void sort(int *array, int n) {
    bool change = true;
    while (change) {
        change = false;
        for (int i = 0; i < n - 1; i++) {
            if (*(array + i) > *(array + i + 1)) {
                int temp = *(array + i);
                *(array + i) = *(array + i + 1);
                *(array + i + 1) = temp;
                change = true;
            }
        }
    }
}


// Creates and returns a sorted array which is combination of 2 sorted arrays of sizes n and m.
int *merge(const int *array1, int n, const int *array2, int m) {
    int *newArray = new int[n + m];
    int i = 0, j = 0;
    while (i < n and j < m) {
        if (*(array1 + i) < *(array2 + j)) {
            *(newArray + i + j) = *(array1 + i);
            i++;
        } else {
            *(newArray + i + j) = *(array2 + j);
            j++;
        }
    }
    while (i < n) {
        *(newArray + i + j) = *(array1 + i);
        i++;
    }
    while (j < m) {
        *(newArray + i + j) = *(array2 + j);
        j++;
    }
    return newArray;
}


// Prints elements of an array of size n separated by space
void printArray(const int *array, int n) {
    for (int i = 0; i < n; i++)
        cout << *(array + i) << ' ';
    cout << '\n';
}


// Creates and returns an array of size n where first n - 1 elements are random numbers from the set
// {0, 1, ..., 10} and the last element is a random number from the set {1, 2, ..., 10}.
int *randomPolynomial(int n) {
    int *array = randomArray(n);
    if (*(array + n - 1) == 0)
        *(array + n - 1) = rand() % 10 + 1;
    return array;
}


// Returns an array of size n + m - 1 which represents product of 2 polynomials.
// array1 is an array of size n containing coefficients of the first polynomial.
// array2 is an array of size m containing coefficients of the second polynomial.
// An array A of size n represents a polynomial P as follows
// P(x) = A[0] + A[1] * x + A[2] * x^2 + A[3] * x^3... + A[n-1] * x^n-1
int *multiplyPolynomials(const int *array1, int n, const int *array2, int m) {
    int *result = new int[n + m - 1];
    for (int i = 0; i < n + m - 1; i++)
        *(result + i) = 0;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            *(result + i + j) += (*(array1 + i) * *(array2 + j));
    return result;
}


// Prints a polynomial
void printPolynomial(const int *array, int n) {
    bool printedFirstCoefficient = false;
    for (int i = 0; i < n; i++) {
        if (*(array + i) != 0) {
            if (printedFirstCoefficient) cout << " + ";
            if (i == 0) cout << *(array);
            else if (i == 1) cout << *(array + 1) << "x";
            else cout << *(array + i) << "x^" << i;
            printedFirstCoefficient = true;
        }
    }
    cout << "\n";
}


// Returns an array A of size n + 1 where A[i][j] equals binomial coefficient "i choose j".
// Note: An array A[x] has only x + 1 elements.
int **generatePascalTriangle(int n) {
    int **result = new int *[n + 1];
    for (int i = 0; i <= n; i++) {
        int *array = new int[i + 1];
        for (int j = 0; j < i + 1; j++)
            *(array + j) = 1;
        *(result + i) = array;
    }
    for (int i = 1; i <= n; i++)
        for (int j = 1; j < i; j++)
            *(*(result + i) + j) = *(*(result + i - 1) + j - 1) + *(*(result + i - 1) + j);
    return result;
}


// Prints an array generated by the function generatePascalTriangle.
// Note: The array is printed correctly only for n < 16.
void printPascalTriangle(int **triangle, int n) {
    if (n > 16) cout << "The array won't be printed correctly.\n";
    cout << "    |";
    for (int i = 0; i < n + 1; i++) {
        printf("% 5d", i);
        cout << " |";
    }
    cout << "\n";

    for (int i = 0; i < n + 1; i++) {
        printf("% 3d", i);
        cout << " |";
        for (int j = 0; j < n + 1; j++) {
            if (j <= i) printf("% 5d", *(*(triangle + i) + j));
            else cout << "     ";
            cout << " |";
        }
        cout << '\n';
    }
}


int main() {

    int *A, *B, *C, n, m;


    // TASK 0
    // Functions used: randomArray, printArray
    n = 8;
    A = randomArray(n);
    cout << "TASK 0\narray A: ";
    printArray(A, n);
    cout << "\n\n";
    delete[] A;


    // TASK 1
    // Functions used: randomArray, max, printArray
    n = 7;
    A = randomArray(n);
    cout << "TASK 1\narray A: ";
    printArray(A, n);
    cout << "max: " << max(A, n) << "\n\n\n";
    delete[] A;


    // TASK 2
    // Functions used: randomArray, reverse, printArray
    n = 9;
    A = randomArray(n);
    cout << "TASK 2\narray A: ";
    printArray(A, n);
    reverse(A, n);
    cout << "reversed array A: ";
    printArray(A, n);
    cout << "\n\n";
    delete[] A;


    // TASK 3
    // Functions used: randomArray, shift, printArray
    n = 7;
    m = 3;
    A = randomArray(n);
    cout << "TASK 3\narray A: ";
    printArray(A, n);
    cout << "shift: " << m << "\nshifted array A: ";
    shift(A, n, m);
    printArray(A, n);
    cout << "\n\n";
    delete[] A;


    // TASK 4
    // Functions used: randomArray, sort, merge, printArray
    n = 4;
    m = 5;
    A = randomArray(n);
    B = randomArray(m);
    sort(A, n);
    sort(B, m);
    cout << "TASK 4\nsorted array A: ";
    printArray(A, n);
    cout << "sorted array B: ";
    printArray(B, m);
    C = merge(A, n, B, m);
    cout << "sorted array C: ";
    printArray(C, n + m);
    cout << "\n\n";
    delete[] A;
    delete[] B;
    delete[] C;


    // TASK 5
    // Functions used: randomPolynomial, multiplyPolynomials, printPolynomial
    n = 3;
    m = 4;
    A = randomPolynomial(n);
    B = randomPolynomial(m);
    cout << "TASK 5\nP(x) = ";
    printPolynomial(A, n);
    cout << "Q(x) = ";
    printPolynomial(B, m);
    C = multiplyPolynomials(A, n, B, m);
    cout << "P(x) * Q(x) = ";
    printPolynomial(C, n + m - 1);
    cout << "\n\n";
    delete[] A;
    delete[] B;
    delete[] C;


    // TASK 6
    // Functions used: generatePascalTriangle, printPascalTriangle
    n = 5;
    int **S = generatePascalTriangle(n);
    cout << "TASK 6\n";
    printPascalTriangle(S, n);
    for (int i = 0; i < n + 1; i++)
        delete[] *(S + i);
    delete[] S;


    return 0;
}